{"ast":null,"code":"/**\n * Utility functions for date handling in the Science AI Platform\n */\n\n// Parse date format (e.g. \"June 2025\" or \"2025-06\")\nfunction parseDate(dateStr) {\n  if (!dateStr) return new Date();\n\n  // Handle different date formats\n  if (dateStr.includes('-')) {\n    // Format: \"2025-06\"\n    const [year, month] = dateStr.split('-');\n    return new Date(parseInt(year), parseInt(month) - 1);\n  } else {\n    // Format: \"June 2025\"\n    const parts = dateStr.split(' ');\n    if (parts.length === 2) {\n      const month = getMonthNumber(parts[0]);\n      const year = parseInt(parts[1]);\n      return new Date(year, month);\n    }\n  }\n  return new Date();\n}\n\n// Get month number from name\nfunction getMonthNumber(monthName) {\n  const months = {\n    'january': 0,\n    'february': 1,\n    'march': 2,\n    'april': 3,\n    'may': 4,\n    'june': 5,\n    'july': 6,\n    'august': 7,\n    'september': 8,\n    'october': 9,\n    'november': 10,\n    'december': 11\n  };\n  return months[monthName.toLowerCase()] || 0;\n}\n\n// Format date as \"Month Year\"\nfunction formatDate(date) {\n  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  return `${months[date.getMonth()]} ${date.getFullYear()}`;\n}\n\n// Get date after adding specified months to a date string\nfunction getDateAfterMonths(timelineStr, months) {\n  try {\n    const startDate = parseDate(timelineStr.split('to')[0].trim());\n    startDate.setMonth(startDate.getMonth() + months);\n    return formatDate(startDate);\n  } catch (e) {\n    return \"TBD\";\n  }\n}\nexport const dateUtils = {\n  parseDate,\n  formatDate,\n  getDateAfterMonths\n};","map":{"version":3,"names":["parseDate","dateStr","Date","includes","year","month","split","parseInt","parts","length","getMonthNumber","monthName","months","toLowerCase","formatDate","date","getMonth","getFullYear","getDateAfterMonths","timelineStr","startDate","trim","setMonth","e","dateUtils"],"sources":["/Users/redli/Desktop/14/Bota/Code/ai_scientist_claude/src/utils/dateUtils.js"],"sourcesContent":["/**\n * Utility functions for date handling in the Science AI Platform\n */\n\n// Parse date format (e.g. \"June 2025\" or \"2025-06\")\nfunction parseDate(dateStr) {\n  if (!dateStr) return new Date();\n  \n  // Handle different date formats\n  if (dateStr.includes('-')) {\n    // Format: \"2025-06\"\n    const [year, month] = dateStr.split('-');\n    return new Date(parseInt(year), parseInt(month) - 1);\n  } else {\n    // Format: \"June 2025\"\n    const parts = dateStr.split(' ');\n    if (parts.length === 2) {\n      const month = getMonthNumber(parts[0]);\n      const year = parseInt(parts[1]);\n      return new Date(year, month);\n    }\n  }\n  \n  return new Date();\n}\n\n// Get month number from name\nfunction getMonthNumber(monthName) {\n  const months = {\n    'january': 0, 'february': 1, 'march': 2, 'april': 3, 'may': 4, 'june': 5,\n    'july': 6, 'august': 7, 'september': 8, 'october': 9, 'november': 10, 'december': 11\n  };\n  return months[monthName.toLowerCase()] || 0;\n}\n\n// Format date as \"Month Year\"\nfunction formatDate(date) {\n  const months = ['January', 'February', 'March', 'April', 'May', 'June',\n                 'July', 'August', 'September', 'October', 'November', 'December'];\n  return `${months[date.getMonth()]} ${date.getFullYear()}`;\n}\n\n// Get date after adding specified months to a date string\nfunction getDateAfterMonths(timelineStr, months) {\n  try {\n    const startDate = parseDate(timelineStr.split('to')[0].trim());\n    startDate.setMonth(startDate.getMonth() + months);\n    return formatDate(startDate);\n  } catch (e) {\n    return \"TBD\";\n  }\n}\n\nexport const dateUtils = {\n  parseDate,\n  formatDate,\n  getDateAfterMonths\n};"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA,SAASA,SAASA,CAACC,OAAO,EAAE;EAC1B,IAAI,CAACA,OAAO,EAAE,OAAO,IAAIC,IAAI,CAAC,CAAC;;EAE/B;EACA,IAAID,OAAO,CAACE,QAAQ,CAAC,GAAG,CAAC,EAAE;IACzB;IACA,MAAM,CAACC,IAAI,EAAEC,KAAK,CAAC,GAAGJ,OAAO,CAACK,KAAK,CAAC,GAAG,CAAC;IACxC,OAAO,IAAIJ,IAAI,CAACK,QAAQ,CAACH,IAAI,CAAC,EAAEG,QAAQ,CAACF,KAAK,CAAC,GAAG,CAAC,CAAC;EACtD,CAAC,MAAM;IACL;IACA,MAAMG,KAAK,GAAGP,OAAO,CAACK,KAAK,CAAC,GAAG,CAAC;IAChC,IAAIE,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;MACtB,MAAMJ,KAAK,GAAGK,cAAc,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC;MACtC,MAAMJ,IAAI,GAAGG,QAAQ,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;MAC/B,OAAO,IAAIN,IAAI,CAACE,IAAI,EAAEC,KAAK,CAAC;IAC9B;EACF;EAEA,OAAO,IAAIH,IAAI,CAAC,CAAC;AACnB;;AAEA;AACA,SAASQ,cAAcA,CAACC,SAAS,EAAE;EACjC,MAAMC,MAAM,GAAG;IACb,SAAS,EAAE,CAAC;IAAE,UAAU,EAAE,CAAC;IAAE,OAAO,EAAE,CAAC;IAAE,OAAO,EAAE,CAAC;IAAE,KAAK,EAAE,CAAC;IAAE,MAAM,EAAE,CAAC;IACxE,MAAM,EAAE,CAAC;IAAE,QAAQ,EAAE,CAAC;IAAE,WAAW,EAAE,CAAC;IAAE,SAAS,EAAE,CAAC;IAAE,UAAU,EAAE,EAAE;IAAE,UAAU,EAAE;EACpF,CAAC;EACD,OAAOA,MAAM,CAACD,SAAS,CAACE,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC;AAC7C;;AAEA;AACA,SAASC,UAAUA,CAACC,IAAI,EAAE;EACxB,MAAMH,MAAM,GAAG,CAAC,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EACvD,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,CAAC;EAChF,OAAO,GAAGA,MAAM,CAACG,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC,IAAID,IAAI,CAACE,WAAW,CAAC,CAAC,EAAE;AAC3D;;AAEA;AACA,SAASC,kBAAkBA,CAACC,WAAW,EAAEP,MAAM,EAAE;EAC/C,IAAI;IACF,MAAMQ,SAAS,GAAGpB,SAAS,CAACmB,WAAW,CAACb,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAACe,IAAI,CAAC,CAAC,CAAC;IAC9DD,SAAS,CAACE,QAAQ,CAACF,SAAS,CAACJ,QAAQ,CAAC,CAAC,GAAGJ,MAAM,CAAC;IACjD,OAAOE,UAAU,CAACM,SAAS,CAAC;EAC9B,CAAC,CAAC,OAAOG,CAAC,EAAE;IACV,OAAO,KAAK;EACd;AACF;AAEA,OAAO,MAAMC,SAAS,GAAG;EACvBxB,SAAS;EACTc,UAAU;EACVI;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}